package com.faycal.outboxsave.service;

import com.faycal.outboxcore.entity.MessageRecord;
import com.faycal.outboxcore.entity.TruckMessage;
import com.faycal.outboxcore.repository.MessageRepository;
import com.faycal.outboxsave.utils.InstantAdapter;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Clock;
import java.time.Instant;
import java.util.List;

@Service
@RequiredArgsConstructor
public class TruckService {

    private final MessageRepository messageRepository;
    private final Clock clock;

    private final Gson gson = new GsonBuilder()
            .registerTypeAdapter(Instant.class, new InstantAdapter())
            .serializeNulls()
            .create();

    /**
     * This method saves the kafka messages generated by the application into the database.
     * The messages will be sent by a scheduler later
     *
     * @param messages : the messages that will be sent
     * @param buCode   : the code of the business unit
     */
    @Transactional
    public void saveMessagesToQueue(List<MessageRecord> messages, String buCode) {
        messages.forEach(message -> saveMessageToQueue(message, buCode));
    }

    /**
     * This method saves the kafka message generated by the application into the database.
     * This message will be sent by a scheduler later
     *
     * @param message a message that will be sent
     * @param buCode  the code of the business unit
     */
    public void saveMessageToQueue(MessageRecord message, String buCode) {
        if (message == null) {
            return;
        }
        TruckMessage truckMessage = new TruckMessage();
        truckMessage.setBuCode(buCode);
        truckMessage.setMessageRecord(message);
        truckMessage.setMessageRecordText(gson.toJson(message));
        truckMessage.setDateTime(clock.instant());
        truckMessage.setType(getType(message));
        messageRepository.save(truckMessage);
    }

    private String getType(MessageRecord messageRecord) {
        if (messageRecord.getEvent() != null) {
            return messageRecord.getEvent().getClass().getSimpleName();
        }
        return null;
    }

}
